//red_pokazivac.h
#include <cstring>
#include <iostream>
using namespace std;
struct zapis{
	string ime,prezime;
	char spol;
	int d,m,g;
	int ai,bi,ci,di,ei;
};

struct tqu{
	zapis val;
	tqu *next;
};

struct queue{
	tqu *front,*rear;
};

queue *InitQ(queue *Q){
	Q = new queue;
	tqu *novi = new tqu;
	novi->next = NULL;
	Q->front = novi;
	Q->rear = novi;
	return Q;
}

bool IsEmptyQ(queue *Q){
	return Q->rear==Q->front;
}

zapis FrontQ(queue *Q){
	return Q->front->next->val;
}

void EnQueueQ(zapis x,queue *Q){
	tqu *novi = new tqu;
	novi->val = x;
	novi->next = NULL;
	Q->rear->next = novi;
	Q->rear = novi;
}

void DeQueueQ(queue *Q){
	tqu *del = Q->front;
	Q->front = Q->front->next;
	delete del;
}


//red_polje.h
#include <iostream>
#include <cstring>
using namespace std;

struct zapis{
	string ime,prezime;
	char spol;
	int d,m,g;
	int ai,bi,ci,di,ei;
};

struct queue{
	zapis val[10000];
	int front,rear;
};

int AddOne(int n){
	return ((n+1)%10000);
}

queue *InitQ(queue *Q){
	Q = new queue;
	Q->front = 0;
	Q->rear = 9999;
	return Q;
}

bool IsEmptyQ(queue *Q){
	if(AddOne(Q->rear)==Q->front) return true;
	return false;
}

zapis FrontQ(queue *Q){
	return Q->val[Q->front];
}

void EnQueueQ(zapis x,queue *Q){
	Q->rear = AddOne(Q->rear);
	Q->val[Q->rear] = x;
}

void DeQueueQ(queue *Q){
	Q->front = AddOne(Q->front);
}
 
